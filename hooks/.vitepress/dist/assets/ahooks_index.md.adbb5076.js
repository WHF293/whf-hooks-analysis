import{_ as s,o as a,c as o,V as n}from"./chunks/framework.d28f41d6.js";const i=JSON.parse('{"title":"ahooks","description":"","frontmatter":{},"headers":[],"relativePath":"ahooks/index.md","filePath":"ahooks/index.md","lastUpdated":1686832046000}'),l={name:"ahooks/index.md"},p=n(`<h1 id="ahooks" tabindex="-1">ahooks <a class="header-anchor" href="#ahooks" aria-label="Permalink to &quot;ahooks&quot;">​</a></h1><ul><li><a href="./../react-hooks.html">hooks 0 基础看这</a></li><li><a href="https://ahooks.js.org/zh-CN/" target="_blank" rel="noreferrer">ahooks 官方文档</a></li></ul><blockquote><p>本系列不会把 ahooks 中的所有 hooks 都分析一边，只会从从中挑选部分和 UI 库无关以及自己平时用的比较多的 hooks 进行分析，如果要学习全部 hooks 的话，建议直接去看项目</p></blockquote><h2 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-label="Permalink to &quot;安装&quot;">​</a></h2><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">pnpm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">add</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">ahooks</span></span></code></pre></div><h2 id="ahooks-项目架构" tabindex="-1">ahooks 项目架构 <a class="header-anchor" href="#ahooks-项目架构" aria-label="Permalink to &quot;ahooks 项目架构&quot;">​</a></h2><blockquote><p>这个系列的全部代码都是基于 ahooks 3.7.7</p></blockquote><p>ahooks 采用 pnpm + monorepo 结构组织代码</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">hooks</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">.github</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">github</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">工作流</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">.husky</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">代码提交规范</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">config</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">文档配置，即配置那个自定义</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">hooks</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">在那个具体的分类下面</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docs</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">文档，基于</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">dumi2</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">example</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">本地开发测试时的测试文件</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">静态资源</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">packages</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">hooks</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">绝大部分自定义</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">hooks</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">都在这个目录下</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">后面介绍的自定义</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">hooks</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">都在这个里面</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">use-url-state</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">和路由相关的自定义hooks，单独作为一个项目</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">...</span></span></code></pre></div><h2 id="ahooks-设计理念" tabindex="-1">ahooks 设计理念 <a class="header-anchor" href="#ahooks-设计理念" aria-label="Permalink to &quot;ahooks 设计理念&quot;">​</a></h2><ul><li><a href="https://ahooks.js.org/zh-CN/guide/blog/function" target="_blank" rel="noreferrer">ahooks 函数处理规范</a></li></ul><p>在使用 ahooks 提供的各种自定义 hooks 时有的 hooks 我们会传入一个函数，如 useMount，有的 hooks 又会返回出一个函数，如 useToggle</p><p>ahooks 使用 useRef 对我们输入的函数进行包装，这样可以保证函数对应的内存地址不变</p><p>而对于输出的函数使用 useCallback 进行包装，这样可以保证输出函数对应的内存地址永远为最新的地址</p><p>从而避免闭包问题</p>`,15),e=[p];function t(r,c,C,y,h,A){return a(),o("div",null,e)}const k=s(l,[["render",t]]);export{i as __pageData,k as default};
